//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlackJackClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Card", Namespace="http://schemas.datacontract.org/2004/07/BlackJackServiceWCF")]
    [System.SerializableAttribute()]
    public partial class Card : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IGame", CallbackContract=typeof(BlackJackClient.ServiceReference1.IGameCallback))]
    public interface IGame {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Connect", ReplyAction="http://tempuri.org/IGame/ConnectResponse")]
        int Connect(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Connect", ReplyAction="http://tempuri.org/IGame/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/GiveCard", ReplyAction="http://tempuri.org/IGame/GiveCardResponse")]
        BlackJackClient.ServiceReference1.Card GiveCard(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/GiveCard", ReplyAction="http://tempuri.org/IGame/GiveCardResponse")]
        System.Threading.Tasks.Task<BlackJackClient.ServiceReference1.Card> GiveCardAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Pass", ReplyAction="http://tempuri.org/IGame/PassResponse")]
        void Pass(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Pass", ReplyAction="http://tempuri.org/IGame/PassResponse")]
        System.Threading.Tasks.Task PassAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Ready", ReplyAction="http://tempuri.org/IGame/ReadyResponse")]
        void Ready(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Ready", ReplyAction="http://tempuri.org/IGame/ReadyResponse")]
        System.Threading.Tasks.Task ReadyAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Exit", ReplyAction="http://tempuri.org/IGame/ExitResponse")]
        void Exit(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Exit", ReplyAction="http://tempuri.org/IGame/ExitResponse")]
        System.Threading.Tasks.Task ExitAsync(int playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/ShowCard", ReplyAction="http://tempuri.org/IGame/ShowCardResponse")]
        void ShowCard(BlackJackClient.ServiceReference1.Card card, int playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameChannel : BlackJackClient.ServiceReference1.IGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameClient : System.ServiceModel.DuplexClientBase<BlackJackClient.ServiceReference1.IGame>, BlackJackClient.ServiceReference1.IGame {
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(string playerName) {
            return base.Channel.Connect(playerName);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string playerName) {
            return base.Channel.ConnectAsync(playerName);
        }
        
        public BlackJackClient.ServiceReference1.Card GiveCard(int playerId) {
            return base.Channel.GiveCard(playerId);
        }
        
        public System.Threading.Tasks.Task<BlackJackClient.ServiceReference1.Card> GiveCardAsync(int playerId) {
            return base.Channel.GiveCardAsync(playerId);
        }
        
        public void Pass(int playerId) {
            base.Channel.Pass(playerId);
        }
        
        public System.Threading.Tasks.Task PassAsync(int playerId) {
            return base.Channel.PassAsync(playerId);
        }
        
        public void Ready(int playerId) {
            base.Channel.Ready(playerId);
        }
        
        public System.Threading.Tasks.Task ReadyAsync(int playerId) {
            return base.Channel.ReadyAsync(playerId);
        }
        
        public void Exit(int playerId) {
            base.Channel.Exit(playerId);
        }
        
        public System.Threading.Tasks.Task ExitAsync(int playerId) {
            return base.Channel.ExitAsync(playerId);
        }
    }
}
